<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Partenaire extends \App\Entity\Partenaire implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'idP', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'nomP', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'file', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'domaine', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'dateP', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'mailp', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'logop', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'id'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'idP', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'nomP', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'file', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'domaine', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'dateP', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'mailp', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'logop', '' . "\0" . 'App\\Entity\\Partenaire' . "\0" . 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Partenaire $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdP(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdP();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdP', []);

        return parent::getIdP();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdP(int $idP): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdP', [$idP]);

        parent::setIdP($idP);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomP(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomP', []);

        return parent::getNomP();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomP(?string $nomP): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomP', [$nomP]);

        parent::setNomP($nomP);
    }

    /**
     * {@inheritDoc}
     */
    public function getDomaine(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDomaine', []);

        return parent::getDomaine();
    }

    /**
     * {@inheritDoc}
     */
    public function setDomaine(?string $domaine): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDomaine', [$domaine]);

        parent::setDomaine($domaine);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateP(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateP', []);

        return parent::getDateP();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateP(?string $dateP): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateP', [$dateP]);

        parent::setDateP($dateP);
    }

    /**
     * {@inheritDoc}
     */
    public function getMailp(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMailp', []);

        return parent::getMailp();
    }

    /**
     * {@inheritDoc}
     */
    public function setMailp(?string $mailp): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMailp', [$mailp]);

        parent::setMailp($mailp);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogop(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogop', []);

        return parent::getLogop();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogop(?string $logop): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogop', [$logop]);

        parent::setLogop($logop);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?\App\Entity\Utilisateur
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(?\App\Entity\Utilisateur $id): \App\Entity\Partenaire
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', []);

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', [$file]);

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDir()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDir', []);

        return parent::getUploadDir();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbsolutRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsolutRoot', []);

        return parent::getAbsolutRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', []);

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadRoot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadRoot', []);

        return parent::getUploadRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function upload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upload', []);

        return parent::upload();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
